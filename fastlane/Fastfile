fastlane_version "2.160.0"

@keychain_name = "fastlane_tmp_keychain-db"

# iOS
@ios_app_id = ENV['iOS_APP_ID']
@ios_scheme = ENV['iOS_SCHEME']

# AppCenter configs
@ac_token = ENV['APPCENTER_API_TOKEN']
@ac_project_name = ENV['APPCENTER_PROJECT_NAME']
@ac_notify_group = ENV['APPCENTER_NOTIFY_GROUP']
@ac_destination_type = ENV['APPCENTER_DESTINATION_TYPE']

@slack_url = ENV['SLACK_WEB_HOOK']

default_platform(:ios)

###
desc 'Android: Increment versionCode and set versionName to package.json version.'
package = load_json(json_path: "./package.json")

private_lane :inc_ver_and do
  increment_version_code(
    gradle_file_path: "./android/app/build.gradle",
  )

  increment_version_name(
    gradle_file_path: "./android/app/build.gradle",
    version_name: package['version']
  )
end


desc 'iOS: Increment build number and set the version to package.json version.'
private_lane :inc_ver_ios do
package = load_json(json_path: "./package.json")

  increment_build_number(
    xcodeproj: './ios/' + package['name'] + '.xcodeproj'
  )
  increment_version_number(
    xcodeproj: './ios/' + package['name'] + '.xcodeproj',
    version_number: package['version']
  )
end


desc 'Bump build numbers, and set the version to match the pacakage.json version.'
lane :bump do
  inc_ver_ios
  inc_ver_and
end

###


lane :get_version_no do
  @build_number = ENV['BUILD_BUILDNUMBER'] || "1"

  @package_version = `node -e "console.log(require('../package.json').version);"`.strip!

  if @build_number == "1"
    @environment = "local"
  else
    @environment = ENV['NAME']  
  end

  #Only update the build number if its not already been updated
  if @build_number.include? "."
    @version = ENV['BUILD_BUILDNUMBER']
  else
    @version = "#{@package_version}.#{@build_number}-#{@environment}"
  end
  
  puts "Build Number is #{@build_number}"
  puts "Environment is #{@environment}"
  puts "Version is #{@version}"
end

lane :release_notes do
  @change_log = changelog_from_git_commits(pretty: 'â€¢ %s', merge_commit_filtering: 'exclude_merges', commits_count: 30)
end

# lane :release_notes do |options|
#   @change_log = conventional_changelog(format: 'markdown', title: options[:title])
# end

platform :android do

  JS_PACKAGE = load_json(json_path: "./package.json")

  desc "Build Android Staging"
  lane :staging_android do
    gradle(
      task: 'assemble',
      build_type: 'staging',
      project_dir: "./android"   
    )
  end
end

platform :ios do

  app_identifier = @ios_app_id
  @ac_notify_group = "iOS"
  @ac_project_name = ENV['APPCENTER_IOS_PROJECT_NAME']

  before_all do
    setup_circle_ci
  end

  lane :certificates do
    match(app_identifier: ["com.joinzoe.covid-zoe", "com.joinzoe.covid-zoe.qa"], readonly: true)
  end

  desc "Build"
  lane :release do |options|

    @match_mode = @ac_destination_type
    @export_method = nil
    @build_configuration = 'Release'

    get_version_no

    increment_build_number(
      xcodeproj: "./ios/Covid.xcodeproj",
      build_number: "#{@build_number}"
    )

    # release_notes

    case options[:env]
    when 'stage'
      # analyze_commits(match: '*')
      @match_mode = 'adhoc'
      @export_method = 'ad-hoc'
      @build_configuration = 'Stage'
      @ac_destination_type ='group'
    when 'prod'
      puts 'implement ios release'
    end
    
    puts @change_log

    match(
      type: @match_mode,
      app_identifier: @ios_app_id,
      git_branch: "master",
      readonly: true,
      keychain_name: @keychain_name,
    )
    
    gym(
      # clean: true,
      configuration: @build_configuration,
      export_method: @export_method,
      scheme: @ios_scheme,
      output_directory: "./build",
      workspace: "./ios/Covid.xcworkspace"
    )

    slack_payload = {
      'Build Date' => Time.new.to_s,
    }

    case options[:env]
    when 'stage'
      appcenter
    when 'prod'
      # Upload to app store
    end
  end

  lane :appcenter do
    appcenter_upload(
      app_name: @ac_project_name,
      api_token: @ac_token,
      destinations: @ac_notify_group,
      destination_type: @ac_destination_type,
      owner_name: "Joinzoe",
      owner_type: "organization",
      ipa: String.try_convert(SharedValues::IPA_OUTPUT_PATH),
      dsym: String.try_convert(SharedValues::DSYM_OUTPUT_PATH),
      release_notes: String.try_convert(git_branch),
      notify_testers: true
    )
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
