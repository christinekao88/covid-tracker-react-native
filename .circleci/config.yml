version: 2.1

references:
  yarn_cache_key: &yarn_cache_key yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
  node_cache_key: &node_cache_key node-v1-{{ checksum "package.json" }}-{{ arch }}
  pod_cache_key: &pod_cache_key pod-v2-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
  gem_cache_key: &gem_cache_key gems-v2-{{ checksum "Gemfile.lock" }}-{{ arch }}

  default_workspace: &default_workspace ~/covid-react

  master_filter: &master_filter
    branches:
      only: master

  develop_filter: &develop_filter
    branches:
      only: develop

  stage_filter: &stage_filter
    branches:
      only: stage

  legacy_ota_filter: &legacy_ota_filter
    branches:
      only: release-0.x-legacy

  feature_filter: &feature_filter
    branches:
      ignore:
        - master
        - develop
        - stage
        - release-0.x-legacy

orbs:
  node: circleci/node@2.0.1
  slack: circleci/slack@3.2.0
  jq: circleci/jq@2.0.1
  coveralls: coveralls/coveralls@1.0.6
  rn: react-native-community/react-native@2.0.1

executors:
  node:
    docker:
      - image: circleci/ruby:latest-node
        environment:
          API_URL: $API_URL
          AMPLITUDE_KEY: $AMPLITUDE_KEY
    resource_class: large

  mobile-build-box:
    macos:
      xcode: 12.0.0


commands:
  prepare_code:
    steps:
      - checkout
      - restore_cache:
          keys: 
            - *yarn_cache_key
            - *node_cache_key
            - *pod_cache_key
            - *gem_cache_key

  install_dependencies:
    steps:
      - run: gem install bundler
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle --clean
          environment:
            BUNDLE_JOBS: '4'
            BUNDLE_RETRY: '3'
      - run: bundle update fastlane
      - run: yarn
      - save_cache:
          key: *yarn_cache_key
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: *node_cache_key
          paths:
            - node_modules
      - save_cache:
          key: *pod_cache_key
          paths:
            - ios/Pods
            - ~/Library/Caches/CocoaPods/Pods
      - save_cache:
          key: *gem_cache_key
          paths:
            - vendor/bundle

  prepare_blank_env:
    steps:
      - run: echo "API_URL=" > .env
      - run: echo "AMPLITUDE_KEY=" >> .env

  prepare_deploy_env:
    steps:
      - run: echo "API_URL=$API_URL" > .env
      - run: echo "AMPLITUDE_KEY=$AMPLITUDE_KEY" >> .env
      - run: echo "MATCH_PASSWORD=$MATCH_PASSWORD" >> .env
      - run: echo "iOS_SCHEME=$iOS_SCHEME" >> .env
      - run: echo "iOS_APP_ID=$iOS_APP_ID" >> .env
      - run: echo "APPCENTER_API_TOKEN=$APPCENTER_API_TOKEN" >> .env
      - run: echo "APPCENTER_IOS_PROJECT_NAME=$APPCENTER_IOS_PROJECT_NAME" >> .env
      - run: echo "APPCENTER_NOTIFY_GROUP=$APPCENTER_NOTIFY_GROUP" >> .env
      - run: echo "APPCENTER_DESTINATION_TYPE=$APPCENTER_DESTINATION_TYPE" >> .env
      - run: echo "FASTLANE_PASSWORD=$FASTLANE_PASSWORD" >> .env
      - run: echo "FASTLANE_SESSION=$FASTLANE_SESSION" >> .env
      - run: echo "NAME=$NAME" >> .env 
      - run: echo "$GOOGLE_SERVICE_JSON" | base64 --decode > google-services.json

  build:
    steps:
      - checkout
      - run: gem install bundler
      - run: bundle install
      - run: bundle update fastlane
      - run: yarn

jobs:
  build:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - prepare_code
      - install_dependencies
      - persist_to_workspace:
          root: *default_workspace
          paths:
            - node_modules

  lint:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - prepare_code
      - run:
          command: |
            mkdir -p ~/reports
            yarn lint:ci
          when: always
      - run: yarn prettier
      - store_test_results:
          path: ~/reports
      - store_artifacts:
          path: ~/reports

  i18n:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - prepare_code
      - run: yarn test:i18n 'sv-SE'
      - run: yarn test:i18n 'es'

  test:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - prepare_code
      - prepare_blank_env
      - run:
          name: Run tests with JUnit as reporter
          command: yarn test:coverage -- --ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - coveralls/upload
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit

  deploy:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - build
      # - deploy_ios
      # - deploy_android
    
  deploy_stage:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - prepare_code
      - prepare_deploy_env
      - install_dependencies
      - run: yarn fastlane:android:stage
      - run: yarn fastlane:ios:stage
      - store_artifacts:
          path: ~/covid-react/build/covid-zoe.ipa
      - store_artifacts:
          path: ~/covid-react/build/covid-zoe.app.dSYM.zip
      - store_artifacts:
          path: ~/covid-react/android/app/build/outputs/apk/production/app-production-release.apk

  deployed_stage:
    executor: mobile-build-box
    steps:
      - slack/notify:
          message: Deployed adhoc builds for iOS & Android
          webhook: $SLACK_WEBHOOK

  legacy_deploy:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - build
      - legacy_ota_publish

  android-build:
    working_directory: *default_workspace
    docker:
      - image: circleci/android:api-29-node
    steps:
      - checkout:
          path: *default_workspace

      - attach_workspace:
          at: *default_workspace

      - restore_cache:
          key: *gem_cache_key

      - run: bundle install

      - save_cache:
          key: *gem_cache_key
          paths:
            - vendor/bundle

      - run:
          name: fastlane android build
          command: |
            ENVFILE=.env bundle exec fastlane android release env:staging

workflows:
  default:
    jobs:
      - build:
          filters: *feature_filter
      - android-build:
          filters: *feature_filter
          requires:
              - build
      # - build:
      #     
      # - lint:
      #     filters: *feature_filter
      #     requires:
      #         - build
      # - i18n:
      #     filters: *feature_filter
      #     requires:
      #         - build
      # - test:
      #     filters: *feature_filter
      #     requires:
      #         - build

      # - slack/approval-notification:
      #     filters: *feature_filter
      #     message: Awaiting manual approval to deploy to stage
      #     context: slack-ci-covid-mobile
      #     requires:
      #       - lint
      #       - i18n
      #       - test
      # - wait_for_approval:
      #     filters: *feature_filter
      #     type: approval
      #     requires:
      #       - lint
      #       - i18n
      #       - test
      # - deploy_stage:
      #     filters: *feature_filter
      #     context: react-covid-tracker-stage
      #     requires:
      #       - wait_for_approval
      # - deployed_stage:
      #     context: slack-ci-covid-mobile
      #     requires:
      #       - deploy_stage
